version: '3.8'

services:
  snitch-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: snitch-discord-bot
    restart: unless-stopped
    environment:
      # Discord Configuration
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      
      # Azure Configuration
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      
      # Cosmos DB Configuration
      - COSMOS_CONNECTION_STRING=${COSMOS_CONNECTION_STRING}
      - COSMOS_DATABASE_NAME=${COSMOS_DATABASE_NAME:-snitch}
      - COSMOS_CONTAINER_OPERATIONAL=${COSMOS_CONTAINER_OPERATIONAL:-operational_data}
      - COSMOS_CONTAINER_CONTENT=${COSMOS_CONTAINER_CONTENT:-content_data}
      
      # AI Configuration
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-mixtral-8x7b-32768}
      
      # ChromaDB Configuration
      - CHROMA_HOST=${CHROMA_HOST:-chroma}
      - CHROMA_PORT=${CHROMA_PORT:-8000}
      - CHROMA_PERSIST_DIRECTORY=/app/chroma_data
      
      # Application Configuration
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-true}
      - ENABLE_MOCK_SERVICES=${ENABLE_MOCK_SERVICES:-false}
      - MOCK_AI_RESPONSES=${MOCK_AI_RESPONSES:-false}
    
    volumes:
      - chroma_data:/app/chroma_data
    
    ports:
      - "8000:8000"
    
    depends_on:
      - chroma
    
    networks:
      - snitch-network

  chroma:
    image: chromadb/chroma:latest
    container_name: snitch-chroma
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_NOFILE=${CHROMA_SERVER_NOFILE:-65536}
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - snitch-network

volumes:
  chroma_data:

networks:
  snitch-network:
    driver: bridge